%YAML 1.2
---
name: Bunch
file_extensions:
  - bunch
  - bunchsnippet
scope: source.bunch
version: 1
contexts:
  main:
    - include: strings
    - include: delay
    - include: frontmatter
    - include: embedded
    - include: placeholder
    - include: script
    - include: fragment
    - include: snippet
    - include: condition
    - include: assignment
    - include: comment
    - include: dialog
    - include: app
    - include: file
    - include: command

  app:
    - match: (!{1,3})?([|@%]*)(?=[\w@])
      captures:
        1: punctuation.definition.variable.negation.bunch
        2: punctuation.definition.variable.modifier.bunch
      push:
        - meta_scope: entity.name.function.app.bunch
        - include: delay
        - match: ([_\^])$
          scope: punctuation.definition.variable.modifier.bunch
        - match: '(.*?)\s*(?=[~#?]|//|$)'
          pop: 1

  assignment:
    - match: '(?!-|#|//)(\S.*?)\s*(=)\s*(?=[^>])'
      captures:
        1: variable.other.bunch
        2: punctuation.definition.variable.bunch
      push:
        - meta_scope: meta.variable.other.bunch
        - match: '(?=\n)'
          pop: 1
        - include: script
        - include: dialog
        - match: '(.*?)'
          scope: string.quoted.single.bunch

  bool:
    - match: (AND|OR|NOT)
      scope: keyword.operator.word.bunch

  command:
    - match: '^(?: {4}|\t)*(!!?)?(\()'
      captures:
        1: punctuation.definition.variable.negation.bunch
        2: punctuation.section.parens.begin.bunch
      push:
        - meta_scope: meta.function-call.command.bunch
        - match: '(display|(dark|light) mode( (on|off))?|(do not disturb|dnd)( (on|off))?|dock (left|right|bottom)|(show|hide) (dock|menu bar|desktop)|(dock|desktop)( (hide|show))?|wallpaper|screen|audio (input|output)|audio|notify|sleep|awake|log|input source)'
          scope: support.function.command.bunch
        - match: '[^\)]+'
          scope: variable.parameter.bunch
        - match: \)
          scope: punctuation.section.parens.end.bunch
          pop: true
        - include: placeholder

  comment:
    - match: '(?: |^)(#+|/{2,})([^\[].*?)$'
      scope: comment.line.bunch
      captures:
        1: punctuation.definition.comment.bunch
    - match: /\*+
      scope: punctuation.definition.comment.begin.bunch
      push: comments-content

  comments-content:
    - meta_scope: comment.block.bunch
    - match: \*+/
      scope: punctuation.definition.comment.end.bunch
      pop: 1
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.bunch

  comparisons:
    - match: \b(weekday|time)\b
      scope: keyword.operator.word.bunch
    - match: \b((not )?(has|is)?\s*(not|!)?\s*(parent|child)|(not )?(is|does)( not)?( (running|before|after|open(ing)?|clos(ing|ed)))?|(not|!)|(starts?|begins?|ends?) with|contains?|(less|greater)( than)?( or equals?( to)?)?|equals?( to)?|[!\^\$\*<=>]+|(yes|no|true|false))\b
      scope: keyword.control.comparison.bunch
    - match: (is )?NOT
      scope: keyword.operator.word.bunch

  condition:
    - match: '^(?: {4}|\t)*((?:else )?if|else|end)'
      captures:
        1: keyword.control.conditional.bunch
      push:
        - meta_scope: meta.conditional.condition.bunch
        - match: $
          pop: true
        - include: comparisons
        - include: bool
        - include: strings

  delay:
    - match: '~\d+'
      scope: punctuation.definition.delay.bunch

  dialog:
    - match: (\?")
      scope: punctuation.section.block.begin.bunch
      push:
        - meta_scope: meta.dialog.query.bunch
        - include: placeholder
        - match: (?!"|$).*?
          scope: string.quoted.double.dialog.bunch
        - match: \"
          scope: punctuation.section.block.end.bunch
          pop: 1
    - match: '\?<'
      scope: punctuation.section.block.begin.bunch
      push:
        - meta_scope: meta.dialog.file.bunch
        - include: placeholder
        - match: '\s*((")(.*?)("))'
          captures:
            1: meta.dialog.query.bunch
            2: punctuation.definition.string.begin.bunch
            3: string.quoted.double.dialog.bunch
            4: punctuation.definition.string.end.bunch
        - match: '.*?(?="|$)'
          scope: meta.script.bunch
        - match: '$'
          pop: 1
    - match: '\?{'
      scope: punctuation.section.block.begin.bunch
      push:
        - meta_scope: meta.dialog.dictionary.bunch
        - include: placeholder
        - include: snippet
        - match: '(\})\s*((")(.*?)("))?$'
          captures:
            1: punctuation.section.block.end.bunch
            2: meta.dialog.query.bunch
            3: punctuation.definition.string.begin.bunch
            4: string.quoted.double.dialog.bunch
            5: punctuation.definition.string.end.bunch
          pop: 1
        - match: ','
          scope: punctuation.definition.bunch
        - match: '(.*?)\s*(=>)\s*'
          captures:
            1: entity.name.section.bunch
            2: punctuation.definition.variable.bunch
          push:
            - include: placeholder
            - include: snippet
            - match: (?!,|\n|\}).*?
              scope: variable.parameter.bunch
            - match: '(?=,|\n|\}|$)'
              pop: 1
    - match: '\?\['
      scope: punctuation.section.block.begin.bunch
      push:
        - meta_scope: meta.dialog.array.bunch
        - include: placeholder
        - include: snippet
        - match: '(\])\s*((")(.*?)("))?$'
          captures:
            1: punctuation.section.block.end.bunch
            2: meta.dialog.query.bunch
            3: punctuation.definition.string.begin.bunch
            4: string.quoted.double.dialog.bunch
            5: punctuation.definition.string.end.bunch
          pop: 1
        - match: ','
          scope: punctuation.definition.bunch
        - match: (?!,|\n|\]|$).*?
          scope: entity.name.section.bunch

  embedded:
    - match: ^_{3,}\s*$
      scope: punctuation.definition.embedded_snippet.bunch
      push:
        - meta_scope: meta.embedded_snippet.bunch
        - match: (?i:s).*\Z
          pop: true
        - include: main

  file:
    - match: (^|\n|\s+)(-(?=[^\-])\s*)
      captures:
        2: punctuation.definition.file.bunch
      push:
        - meta_scope: meta.app.file.bunch
        - match: $
          pop: true
        - match: (\{)(.*?)(\})
          captures:
            1: punctuation.definition.keycommand.bunch
            2: string.quoted.double.keycommand.bunch
            3: punctuation.definition.keycommand.bunch
        - match: (\[)(.*?)(\])
          captures:
            1: punctuation.definition.keycommand.bunch
            2: string.quoted.double.keystroke.bunch
            3: punctuation.definition.keycommand.bunch
        - include: placeholder
        - include: command
        - include: assignment

  fragment:
    - match: '^((?:-{2,}|[=>#])[\-=># ]*)(\[)([^\]]+)(\])(.*\s*$)'
      scope: meta.snippet.bunch
      captures:
        1: comment.line.snippet.divider.bunch
        2: punctuation.definition.snippet.fragment.bunch
        3: keyword.fragment.id.bunch
        4: punctuation.definition.snippet.fragment.bunch
        5: comment.line.snippet.divider.bunch

  frontmatter:
    - match: '^-{3,}\s*$'
      scope: punctuation.definition.frontmatter.bunch
      push:
        - meta_scope: 'meta.frontmatter.bunch'
        - include: comment
        - match: '^-{3,}\s*$'
          scope: punctuation.definition.frontmatter.bunch
          pop: true
        - include: frontmatter_key
        - include: strings

  frontmatter_key:
    - match: '^(\S[\w ]+)(:)\s*(.*?)$'
      scope: meta.frontmatter_key.bunch
      captures:
        1: variable.key.frontmatter.bunch
        2: keyword.operator.assignment
        3: string.quoted.single.value.frontmatter.bunch

  placeholder:
    - match: '([\$%]\{)'
      scope: punctuation.definition.variable.placeholder.bunch
      push:
        - meta_scope: meta.placeholder.bunch
        - match: '\}'
          scope: punctuation.definition.variable.placeholder.bunch
          pop: 1
        - match: '/'
          scope: punctuation.definition.placeholder.transform.bunch
        - match: ':'
          scope: punctuation.definition.placeholder.default.bunch
        - match: '(?<=/)([^:}]+)'
          scope: string.quoted.single.transform.bunch
        - match: '(?<=:)([^/}]+)'
          scope: string.quoted.single.default.bunch
        - match: '[^/:}]+'
          scope: variable.other.bunch

  script:
    - match: '(!!?)?([*$&])\s+(.*?)$'
      scope: meta.script.bunch
      captures:
        1: punctuation.definition.variable.negation.bunch
        2: punctuation.definition.variable.bunch
        3: string.quoted.single.script.bunch

  snippet:
    - match: (?:\s*)(!!?)?(<)
      captures:
        1: punctuation.definition.negation.bunch
        2: punctuation.definition.generic.begin.bunch
      push:
        - meta_scope: meta.snippet.bunch
        - include: delay
        - include: comment
        - include: placeholder
        - match: '[^#?]+(?=#|//|\?|$)'
          scope: entity.name.file.bunch
        - match: '$'
          pop: 1
        - match: '(\?")(.*?)(")'
          scope: meta.dialog.query.bunch
          captures:
            1: punctuation.definition.string.begin.bunch
            2: string.quoted.double
            3: punctuation.definition.string.end.bunch
        - match: (?<=\S|^)(#)
          captures:
            1: punctuation.accessor.fragment.bunch
          push:
            - meta_scope: meta.snippet.fragment.bunch
            - include: placeholder
            - match: (?=[~#?]|//|$)
              pop: 1
            - match: (.*?)
              scope: keyword.fragment.id.bunch

  strings:
    - match: '"(.*?)"'
      scope: string.quoted.double.bunch
    - match: \'.*?\'
      scope: string.quoted.single.bunch
